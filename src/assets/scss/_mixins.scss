// cet ensemble de propriétés CSS est réuitilisable :
@mixin title-mixin {
    font-weight: bold;
    font-family: 'Courier New', Courier, monospace;
    text-decoration: underline;
}

/**
* cette mixin permet d'appliquer une gouttière (une marge externe) autour d'un élément. Il peut y avoir 3 tailles de gouttière différentes : 'small', 'normal', 'large' */
@mixin applyGutter($size) {
    // en fonction de la valeur de $size, on applique une marge différente
    @if ($size == 'small') {
        margin: 1rem;
    }
    @else if ($size == 'normal') {
        margin: 2rem;
    }
    @else if ($size == 'large') {
        margin: 3rem;
    }
    @else {
        margin: 2rem;
    }
}

@mixin rotateBlock {
    transform: rotate(45deg);
    // on récupère le CSS qui est passé à la mixin
    @content;
}

@mixin unfof($targetColor) {
    background-color: $targetColor;
    @content;
}

// mise en forme pour l'exemple
.mixin-example {
    background-color: #F0F;
    width: 200px;
    height: 200px;

    @include applyGutter('large'); // on récupère le contenu de la mixin à l'intérieur de la règle qui l'appelle.
    // on peut passer du CSS à une mixin
    @include rotateBlock() {
        transition: transform .5s;
    }

    @include unfof(#369) {
        border: 3px solid #135
    };
}

.mixin-other-example {
    background-color: #F0F;
    width: 100px;
    height: 100px;

    @include unfof(red) {

    }
}

// exemple utilisation de mixins :
// tous les titres ont un style identique SAUF la font-size
h1 {
    // h1 profitera des règles définies dans title-mixin
    @include title-mixin;
    font-size: 2rem;
}

h2 {
    @include title-mixin;
    font-size: 1.6rem;
}

h3 {
    
    @include title-mixin;
    font-size: 1.2rem;
}

h4 {
    @include title-mixin;
    font-size: 1rem;
}

// déclarer une mixin pour générer une média query qui prend en charge une largeur min variable => small, medium, large, extra-large par ex.
// $size peut contenir ces chaînes : medium, large, extra-large
@mixin breakpoint ($size) {

    $breakpoint-min-width: 400px;

    @if ($size == 'medium') {
        $breakpoint-min-width: 400px;
    }
    @else if ($size == 'large') {
        $breakpoint-min-width: 800px;
    }

    // on fait dépendre la valeur de min-width de la valeur du paramètre $size
    @media (min-width: $breakpoint-min-width) {
        // sera "remplacé" par le contenu de la règle qui utilise la mixin
        @content;
    }
}


// facultatif : déclarer une mixin pour chaque breakpoint prévu (small, medium, large, extra-large)
@mixin breakpoint-medium {
    @include breakpoint ('medium') {
        @content;
    }
}

@mixin breakpoint-large {
    @include breakpoint ('large') {
        @content;
    }
}
